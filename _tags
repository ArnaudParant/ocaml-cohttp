# OASIS_START
# DO NOT EDIT (digest: 9811a8d0cec3aadfb14958737d8345c1)
# Ignore VCS directories, you can use the same kind of rule outside 
# OASIS_START/STOP if you want to exclude directories that contains 
# useless stuff for the build process
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library cohttp_protocol
"cohttp/cohttp_protocol.cmxs": use_cohttp_protocol
"cohttp/IO.cmx": for-pack(Cohttp_protocol)
"cohttp/state_types.cmx": for-pack(Cohttp_protocol)
"cohttp/code.cmx": for-pack(Cohttp_protocol)
"cohttp/header.cmx": for-pack(Cohttp_protocol)
"cohttp/cookie.cmx": for-pack(Cohttp_protocol)
"cohttp/request.cmx": for-pack(Cohttp_protocol)
"cohttp/response.cmx": for-pack(Cohttp_protocol)
"cohttp/transfer.cmx": for-pack(Cohttp_protocol)
"cohttp/accept.cmx": for-pack(Cohttp_protocol)
"cohttp/accept_parser.cmx": for-pack(Cohttp_protocol)
"cohttp/accept_lexer.cmx": for-pack(Cohttp_protocol)
"cohttp/base64.cmx": for-pack(Cohttp_protocol)
"cohttp/auth.cmx": for-pack(Cohttp_protocol)
"cohttp/header_io.cmx": for-pack(Cohttp_protocol)
"cohttp/transfer_io.cmx": for-pack(Cohttp_protocol)
"cohttp/client.cmx": for-pack(Cohttp_protocol)
"cohttp/body.cmx": for-pack(Cohttp_protocol)
<cohttp/*.ml{,i}>: pkg_uri
<cohttp/*.ml{,i}>: pkg_re
<cohttp/*.ml{,i}>: pkg_uri.services
# Library cohttp_lwt_unix
"lwt/cohttp_lwt_unix.cmxs": use_cohttp_lwt_unix
<lwt/*.ml{,i}>: pkg_lwt.unix
<lwt/*.ml{,i}>: pkg_lwt
<lwt/*.ml{,i}>: pkg_lwt.ssl
# Library cohttp_mirage
"lwt/cohttp_mirage.cmxs": use_cohttp_mirage
<lwt/*.ml{,i}>: use_cohttp_protocol
<lwt/*.ml{,i}>: pkg_uri
<lwt/*.ml{,i}>: pkg_re
<lwt/*.ml{,i}>: pkg_lwt.syntax
<lwt/*.ml{,i}>: pkg_mirage
<lwt/*.ml{,i}>: pkg_mirage-net
<lwt/*.ml{,i}>: pkg_uri.services
# Library cohttp_async
"async/cohttp_async.cmxs": use_cohttp_async
<async/*.ml{,i}>: use_cohttp_protocol
<async/*.ml{,i}>: pkg_uri
<async/*.ml{,i}>: pkg_async_core
<async/*.ml{,i}>: pkg_async_unix
<async/*.ml{,i}>: pkg_threads
<async/*.ml{,i}>: pkg_async
<async/*.ml{,i}>: pkg_re
<async/*.ml{,i}>: pkg_uri.services
# Library cohttp
"std/cohttp.cmxs": use_cohttp
<std/*.ml{,i}>: use_cohttp_async
<std/*.ml{,i}>: use_cohttp_lwt_unix
<std/*.ml{,i}>: use_cohttp_protocol
<std/*.ml{,i}>: pkg_uri
<std/*.ml{,i}>: pkg_async_core
<std/*.ml{,i}>: pkg_async_unix
<std/*.ml{,i}>: pkg_threads
<std/*.ml{,i}>: pkg_async
<std/*.ml{,i}>: pkg_re
<std/*.ml{,i}>: pkg_lwt.syntax
<std/*.ml{,i}>: pkg_lwt.unix
<std/*.ml{,i}>: pkg_lwt
<std/*.ml{,i}>: pkg_lwt.ssl
<std/*.ml{,i}>: pkg_uri.services
# Executable test_parser
<lib_test/test_parser.{native,byte}>: use_cohttp
<lib_test/test_parser.{native,byte}>: use_cohttp_async
<lib_test/test_parser.{native,byte}>: use_cohttp_lwt_unix
<lib_test/test_parser.{native,byte}>: use_cohttp_protocol
<lib_test/test_parser.{native,byte}>: pkg_oUnit
<lib_test/test_parser.{native,byte}>: pkg_uri
<lib_test/test_parser.{native,byte}>: pkg_async_core
<lib_test/test_parser.{native,byte}>: pkg_async_unix
<lib_test/test_parser.{native,byte}>: pkg_threads
<lib_test/test_parser.{native,byte}>: pkg_async
<lib_test/test_parser.{native,byte}>: pkg_re
<lib_test/test_parser.{native,byte}>: pkg_lwt.syntax
<lib_test/test_parser.{native,byte}>: pkg_lwt.unix
<lib_test/test_parser.{native,byte}>: pkg_lwt
<lib_test/test_parser.{native,byte}>: pkg_lwt.ssl
<lib_test/test_parser.{native,byte}>: pkg_uri.services
<lib_test/test_parser.{native,byte}>: custom
# Executable test_accept
<lib_test/test_accept.{native,byte}>: use_cohttp
<lib_test/test_accept.{native,byte}>: use_cohttp_async
<lib_test/test_accept.{native,byte}>: use_cohttp_lwt_unix
<lib_test/test_accept.{native,byte}>: use_cohttp_protocol
<lib_test/test_accept.{native,byte}>: pkg_oUnit
<lib_test/test_accept.{native,byte}>: pkg_uri
<lib_test/test_accept.{native,byte}>: pkg_async_core
<lib_test/test_accept.{native,byte}>: pkg_async_unix
<lib_test/test_accept.{native,byte}>: pkg_threads
<lib_test/test_accept.{native,byte}>: pkg_async
<lib_test/test_accept.{native,byte}>: pkg_re
<lib_test/test_accept.{native,byte}>: pkg_lwt.syntax
<lib_test/test_accept.{native,byte}>: pkg_lwt.unix
<lib_test/test_accept.{native,byte}>: pkg_lwt
<lib_test/test_accept.{native,byte}>: pkg_lwt.ssl
<lib_test/test_accept.{native,byte}>: pkg_uri.services
<lib_test/test_accept.{native,byte}>: custom
# Executable test_header
<lib_test/test_header.{native,byte}>: use_cohttp
<lib_test/test_header.{native,byte}>: use_cohttp_async
<lib_test/test_header.{native,byte}>: use_cohttp_lwt_unix
<lib_test/test_header.{native,byte}>: use_cohttp_protocol
<lib_test/test_header.{native,byte}>: pkg_oUnit
<lib_test/test_header.{native,byte}>: pkg_uri
<lib_test/test_header.{native,byte}>: pkg_async_core
<lib_test/test_header.{native,byte}>: pkg_async_unix
<lib_test/test_header.{native,byte}>: pkg_threads
<lib_test/test_header.{native,byte}>: pkg_async
<lib_test/test_header.{native,byte}>: pkg_re
<lib_test/test_header.{native,byte}>: pkg_lwt.syntax
<lib_test/test_header.{native,byte}>: pkg_lwt.unix
<lib_test/test_header.{native,byte}>: pkg_lwt
<lib_test/test_header.{native,byte}>: pkg_lwt.ssl
<lib_test/test_header.{native,byte}>: pkg_uri.services
<lib_test/test_header.{native,byte}>: custom
# Executable test_net_lwt
<lib_test/test_net_lwt.{native,byte}>: use_cohttp
<lib_test/test_net_lwt.{native,byte}>: use_cohttp_async
<lib_test/test_net_lwt.{native,byte}>: use_cohttp_lwt_unix
<lib_test/test_net_lwt.{native,byte}>: use_cohttp_protocol
<lib_test/test_net_lwt.{native,byte}>: pkg_oUnit
<lib_test/test_net_lwt.{native,byte}>: pkg_uri
<lib_test/test_net_lwt.{native,byte}>: pkg_async_core
<lib_test/test_net_lwt.{native,byte}>: pkg_async_unix
<lib_test/test_net_lwt.{native,byte}>: pkg_threads
<lib_test/test_net_lwt.{native,byte}>: pkg_async
<lib_test/test_net_lwt.{native,byte}>: pkg_re
<lib_test/test_net_lwt.{native,byte}>: pkg_lwt.syntax
<lib_test/test_net_lwt.{native,byte}>: pkg_lwt.unix
<lib_test/test_net_lwt.{native,byte}>: pkg_lwt
<lib_test/test_net_lwt.{native,byte}>: pkg_lwt.ssl
<lib_test/test_net_lwt.{native,byte}>: pkg_uri.services
<lib_test/test_net_lwt.{native,byte}>: custom
# Executable test_net_lwt_google
<lib_test/test_net_lwt_google.{native,byte}>: use_cohttp_lwt_unix
<lib_test/test_net_lwt_google.{native,byte}>: use_cohttp_protocol
<lib_test/test_net_lwt_google.{native,byte}>: pkg_uri
<lib_test/test_net_lwt_google.{native,byte}>: pkg_re
<lib_test/test_net_lwt_google.{native,byte}>: pkg_lwt.syntax
<lib_test/test_net_lwt_google.{native,byte}>: pkg_lwt.unix
<lib_test/test_net_lwt_google.{native,byte}>: pkg_lwt
<lib_test/test_net_lwt_google.{native,byte}>: pkg_lwt.ssl
<lib_test/test_net_lwt_google.{native,byte}>: pkg_uri.services
<lib_test/test_net_lwt_google.{native,byte}>: custom
# Executable test_net_lwt_server
<lib_test/test_net_lwt_server.{native,byte}>: use_cohttp
<lib_test/test_net_lwt_server.{native,byte}>: use_cohttp_async
<lib_test/test_net_lwt_server.{native,byte}>: use_cohttp_lwt_unix
<lib_test/test_net_lwt_server.{native,byte}>: use_cohttp_protocol
<lib_test/test_net_lwt_server.{native,byte}>: pkg_uri
<lib_test/test_net_lwt_server.{native,byte}>: pkg_async_core
<lib_test/test_net_lwt_server.{native,byte}>: pkg_async_unix
<lib_test/test_net_lwt_server.{native,byte}>: pkg_threads
<lib_test/test_net_lwt_server.{native,byte}>: pkg_async
<lib_test/test_net_lwt_server.{native,byte}>: pkg_re
<lib_test/test_net_lwt_server.{native,byte}>: pkg_lwt.syntax
<lib_test/test_net_lwt_server.{native,byte}>: pkg_lwt.unix
<lib_test/test_net_lwt_server.{native,byte}>: pkg_lwt
<lib_test/test_net_lwt_server.{native,byte}>: pkg_lwt.ssl
<lib_test/test_net_lwt_server.{native,byte}>: pkg_uri.services
<lib_test/test_net_lwt_server.{native,byte}>: custom
# Executable test_net_lwt_client_and_server
<lib_test/test_net_lwt_client_and_server.{native,byte}>: use_cohttp
<lib_test/test_net_lwt_client_and_server.{native,byte}>: use_cohttp_async
<lib_test/test_net_lwt_client_and_server.{native,byte}>: use_cohttp_lwt_unix
<lib_test/test_net_lwt_client_and_server.{native,byte}>: use_cohttp_protocol
<lib_test/test_net_lwt_client_and_server.{native,byte}>: pkg_uri
<lib_test/test_net_lwt_client_and_server.{native,byte}>: pkg_async_core
<lib_test/test_net_lwt_client_and_server.{native,byte}>: pkg_async_unix
<lib_test/test_net_lwt_client_and_server.{native,byte}>: pkg_threads
<lib_test/test_net_lwt_client_and_server.{native,byte}>: pkg_async
<lib_test/test_net_lwt_client_and_server.{native,byte}>: pkg_re
<lib_test/test_net_lwt_client_and_server.{native,byte}>: pkg_lwt.syntax
<lib_test/test_net_lwt_client_and_server.{native,byte}>: pkg_lwt.unix
<lib_test/test_net_lwt_client_and_server.{native,byte}>: pkg_lwt
<lib_test/test_net_lwt_client_and_server.{native,byte}>: pkg_lwt.ssl
<lib_test/test_net_lwt_client_and_server.{native,byte}>: pkg_uri.services
<lib_test/test_net_lwt_client_and_server.{native,byte}>: custom
# Executable test_net_mirage_server
<lib_test/test_net_mirage_server.{native,byte}>: use_cohttp
<lib_test/test_net_mirage_server.{native,byte}>: use_cohttp_async
<lib_test/test_net_mirage_server.{native,byte}>: use_cohttp_mirage
<lib_test/test_net_mirage_server.{native,byte}>: use_cohttp_lwt_unix
<lib_test/test_net_mirage_server.{native,byte}>: use_cohttp_protocol
<lib_test/test_net_mirage_server.{native,byte}>: pkg_uri
<lib_test/test_net_mirage_server.{native,byte}>: pkg_async_core
<lib_test/test_net_mirage_server.{native,byte}>: pkg_async_unix
<lib_test/test_net_mirage_server.{native,byte}>: pkg_threads
<lib_test/test_net_mirage_server.{native,byte}>: pkg_async
<lib_test/test_net_mirage_server.{native,byte}>: pkg_re
<lib_test/test_net_mirage_server.{native,byte}>: pkg_lwt.syntax
<lib_test/test_net_mirage_server.{native,byte}>: pkg_mirage
<lib_test/test_net_mirage_server.{native,byte}>: pkg_mirage-net
<lib_test/test_net_mirage_server.{native,byte}>: pkg_lwt.unix
<lib_test/test_net_mirage_server.{native,byte}>: pkg_lwt
<lib_test/test_net_mirage_server.{native,byte}>: pkg_lwt.ssl
<lib_test/test_net_mirage_server.{native,byte}>: pkg_uri.services
<lib_test/*.ml{,i}>: use_cohttp_mirage
<lib_test/*.ml{,i}>: pkg_mirage
<lib_test/*.ml{,i}>: pkg_mirage-net
<lib_test/test_net_mirage_server.{native,byte}>: custom
# Executable test_net_async
<lib_test/test_net_async.{native,byte}>: use_cohttp
<lib_test/test_net_async.{native,byte}>: use_cohttp_async
<lib_test/test_net_async.{native,byte}>: use_cohttp_lwt_unix
<lib_test/test_net_async.{native,byte}>: use_cohttp_protocol
<lib_test/test_net_async.{native,byte}>: pkg_oUnit
<lib_test/test_net_async.{native,byte}>: pkg_uri
<lib_test/test_net_async.{native,byte}>: pkg_async_core
<lib_test/test_net_async.{native,byte}>: pkg_async_unix
<lib_test/test_net_async.{native,byte}>: pkg_threads
<lib_test/test_net_async.{native,byte}>: pkg_async
<lib_test/test_net_async.{native,byte}>: pkg_re
<lib_test/test_net_async.{native,byte}>: pkg_lwt.syntax
<lib_test/test_net_async.{native,byte}>: pkg_lwt.unix
<lib_test/test_net_async.{native,byte}>: pkg_lwt
<lib_test/test_net_async.{native,byte}>: pkg_lwt.ssl
<lib_test/test_net_async.{native,byte}>: pkg_uri.services
<lib_test/test_net_async.{native,byte}>: custom
# Executable test_net_async_server
<lib_test/test_net_async_server.{native,byte}>: use_cohttp
<lib_test/test_net_async_server.{native,byte}>: use_cohttp_async
<lib_test/test_net_async_server.{native,byte}>: use_cohttp_lwt_unix
<lib_test/test_net_async_server.{native,byte}>: use_cohttp_protocol
<lib_test/test_net_async_server.{native,byte}>: pkg_oUnit
<lib_test/test_net_async_server.{native,byte}>: pkg_uri
<lib_test/test_net_async_server.{native,byte}>: pkg_async_core
<lib_test/test_net_async_server.{native,byte}>: pkg_async_unix
<lib_test/test_net_async_server.{native,byte}>: pkg_threads
<lib_test/test_net_async_server.{native,byte}>: pkg_async
<lib_test/test_net_async_server.{native,byte}>: pkg_re
<lib_test/test_net_async_server.{native,byte}>: pkg_lwt.syntax
<lib_test/test_net_async_server.{native,byte}>: pkg_lwt.unix
<lib_test/test_net_async_server.{native,byte}>: pkg_lwt
<lib_test/test_net_async_server.{native,byte}>: pkg_lwt.ssl
<lib_test/test_net_async_server.{native,byte}>: pkg_uri.services
<lib_test/*.ml{,i}>: use_cohttp
<lib_test/*.ml{,i}>: use_cohttp_async
<lib_test/*.ml{,i}>: use_cohttp_lwt_unix
<lib_test/*.ml{,i}>: use_cohttp_protocol
<lib_test/*.ml{,i}>: pkg_oUnit
<lib_test/*.ml{,i}>: pkg_uri
<lib_test/*.ml{,i}>: pkg_async_core
<lib_test/*.ml{,i}>: pkg_async_unix
<lib_test/*.ml{,i}>: pkg_threads
<lib_test/*.ml{,i}>: pkg_async
<lib_test/*.ml{,i}>: pkg_re
<lib_test/*.ml{,i}>: pkg_lwt.syntax
<lib_test/*.ml{,i}>: pkg_lwt.unix
<lib_test/*.ml{,i}>: pkg_lwt
<lib_test/*.ml{,i}>: pkg_lwt.ssl
<lib_test/*.ml{,i}>: pkg_uri.services
<lib_test/test_net_async_server.{native,byte}>: custom
# OASIS_STOP
<lib_test/{test_parser,test_net_lwt,test_net_lwt_server,test_net_mirage_server,test_net_lwt_client_and_server}.ml>: syntax_camlp4o, pkg_lwt.syntax
<lwt/*>: syntax_camlp4o, pkg_lwt.syntax
true: annot
